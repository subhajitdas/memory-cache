{"version":3,"sources":["../index.js"],"names":[],"mappings":";;;;;;AACA,MAAM,SAAN,CAAgB;AACZ,gBAAY,GAAZ,EAAiB,KAAjB,EAAwB;AACpB,aAAK,IAAL,GAAY,GAAZ,CADoB;AAEpB,aAAK,MAAL,GAAc,KAAd,CAFoB;KAAxB;;AAKA,QAAI,GAAJ,GAAU;AACN,eAAO,KAAK,IAAL,CADD;KAAV;AAGA,QAAI,KAAJ,GAAY;AACR,eAAO,KAAK,MAAL,CADC;KAAZ;AAGA,QAAI,KAAJ,CAAU,KAAV,EAAiB;AACb,aAAK,MAAL,GAAc,KAAd,CADa;KAAjB;AAGA,QAAI,cAAJ,GAAqB;AACjB,aAAK,eAAL,CADiB;KAArB;AAGA,QAAI,cAAJ,CAAmB,KAAnB,EAA0B;AACtB,aAAK,eAAL,GAAuB,KAAvB,CADsB;KAA1B;CAlBJ;;;;;AA0BA,MAAM,WAAN,CAAkB;;;;AAId,kBAAc;AACV,aAAK,WAAL,GAAmB,IAAI,GAAJ,EAAnB,CADU;KAAd;;;;;AAJc,QAWV,IAAJ,GAAW;AACP,eAAO,KAAK,WAAL,CAAiB,IAAjB,CADA;KAAX;;;;;;AAXc,YAmBd,CAAS,GAAT,EAAc;AACV,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAqB,GAArB,CAAP,CADU;KAAd;;;;;;AAnBc,OA2Bd,CAAI,GAAJ,EAAS;AACL,YAAI,OAAO,KAAK,WAAL,CAAiB,GAAjB,CAAqB,GAArB,CAAP,CADC;AAEL,eAAO,OAAO,KAAK,KAAL,GAAa,IAApB,CAFF;KAAT;;;;;;;;;;AA3Bc,OAwCd,CAAI,GAAJ,EAAS,KAAT,EAAgB,cAAhB,EAAgC,iBAAhC,EAAmD;AAC/C,YAAI,KAAK,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACpB,iBAAK,MAAL,CAAY,GAAZ,EADoB;SAAxB;;AAIA,YAAI,OAAO,IAAI,SAAJ,CAAc,GAAd,EAAmB,KAAnB,CAAP,CAL2C;AAM/C,YAAI,CAAC,MAAM,cAAN,CAAD,EAAwB;AACxB,iBAAK,cAAL,GAAsB,WAAW,MAAM;AACnC,qBAAK,MAAL,CAAY,GAAZ,EADmC;AAEnC,oBAAI,qBAAsB,OAAO,iBAAP,KAA6B,UAA7B,EAA0C;AAChE,sCAAkB,GAAlB,EADgE;iBAApE;aAF6B,EAK9B,cALmB,CAAtB,CADwB;SAA5B;AAQA,aAAK,WAAL,CAAiB,GAAjB,CAAqB,GAArB,EAA0B,IAA1B,EAd+C;KAAnD;;;;;AAxCc,UA4Dd,CAAO,GAAP,EAAY;AACR,YAAI,OAAO,KAAK,WAAL,CAAiB,GAAjB,CAAqB,GAArB,CAAP,CADI;AAER,YAAI,QAAQ,KAAK,cAAL,EAAqB;AAC7B,yBAAa,KAAK,cAAL,CAAb,CAD6B;SAAjC;AAGA,aAAK,WAAL,CAAiB,MAAjB,CAAwB,GAAxB,EALQ;KAAZ;;;;AA5Dc,SAsEd,GAAQ;AACJ,aAAK,IAAI,IAAJ,IAAY,KAAK,WAAL,CAAiB,MAAjB,EAAjB,EAA4C;AACxC,gBAAI,KAAK,cAAL,EAAqB;AACrB,6BAAa,KAAK,cAAL,CAAb,CADqB;aAAzB;SADJ;AAKA,aAAK,WAAL,CAAiB,KAAjB,GANI;KAAR;CAtEJ;;QAgFQ","file":"index.js","sourcesContent":["\r\nclass CacheItem {\r\n    constructor(key, value) {\r\n        this._key = key;\r\n        this._value = value;\r\n    }\r\n\r\n    get Key() {\r\n        return this._key;\r\n    }\r\n    get Value() {\r\n        return this._value;\r\n    }\r\n    set Value(value) {\r\n        this._value = value;\r\n    }\r\n    get TimeoutCounter() {\r\n        this._timeoutCounter;\r\n    }\r\n    set TimeoutCounter(value) {\r\n        this._timeoutCounter = value;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an in memory cache collection.\r\n */\r\nclass MemoryCache {\r\n    /**\r\n     * Creates a new in-memory cache collection.\r\n     */\r\n    constructor() {\r\n        this._cacheStore = new Map();\r\n    }\r\n    /**\r\n     * Number of items in cache currently.\r\n     * @returns {Number}\r\n     */\r\n    get Size() {\r\n        return this._cacheStore.size;\r\n    }\r\n    /**\r\n     * Checks if an item exists in cache.\r\n     * @param {*} key The unique key from the item.\r\n     * @returns {boolean}\r\n     */\r\n    contains(key) {\r\n        return this._cacheStore.has(key);\r\n    }\r\n    /**\r\n     * Returns an entry from the cache.\r\n     * @param {*} key A unique identifier for the cache entry to get.\r\n     * @returns {*} A reference to the cache entry that is identified by key, if the entry exists; otherwise, null.\r\n     */\r\n    get(key) {\r\n        let item = this._cacheStore.get(key);\r\n        return item ? item.Value : null;\r\n    }\r\n    /**\r\n     * Inserts a cache entry into the cache. \r\n     * If the specified entry does not exist in the cache, a new cache entry is inserted. \r\n     * If the specified entry already exists, its value is updated.\r\n     * @param {*} key A unique identifier for the cache entry.\r\n     * @param {*} value The value to store in the cache.\r\n     * @param {Number} expirationTime Milisecounds after which the cache expires.\r\n     * @param {function} onTimeoutCallback A callback function to notify when the item is removed from cache after timeout. \r\n     */\r\n    set(key, value, expirationTime, onTimeoutCallback) {\r\n        if (this.contains(key)) {\r\n            this.remove(key);\r\n        }\r\n\r\n        let item = new CacheItem(key, value);\r\n        if (!isNaN(expirationTime)) {\r\n            item.TimeoutCounter = setTimeout(() => {\r\n                this.remove(key);\r\n                if (onTimeoutCallback && (typeof onTimeoutCallback === 'function')) {\r\n                    onTimeoutCallback(key);\r\n                }\r\n            }, expirationTime);\r\n        }\r\n        this._cacheStore.set(key, item);\r\n    }\r\n    /**\r\n     * Removes an item from the cache.\r\n     * @param {*} key The unique identifier for the cache entry.\r\n     */\r\n    remove(key) {\r\n        let item = this._cacheStore.get(key);\r\n        if (item && item.TimeoutCounter) {\r\n            clearTimeout(item.TimeoutCounter);\r\n        }\r\n        this._cacheStore.delete(key);\r\n    }\r\n    /**\r\n     * Removes all items from the cache.\r\n     */\r\n    clear() {\r\n        for (let item of this._cacheStore.values()) {\r\n            if (item.TimeoutCounter) {\r\n                clearTimeout(item.TimeoutCounter);\r\n            }\r\n        }\r\n        this._cacheStore.clear();\r\n    }\r\n}\r\n\r\nexport {MemoryCache};"]}